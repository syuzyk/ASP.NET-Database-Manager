#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Workshop4Group8
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="TravelExperts")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertPackage(Package instance);
    partial void UpdatePackage(Package instance);
    partial void DeletePackage(Package instance);
    partial void InsertPackages_Products_Supplier(Packages_Products_Supplier instance);
    partial void UpdatePackages_Products_Supplier(Packages_Products_Supplier instance);
    partial void DeletePackages_Products_Supplier(Packages_Products_Supplier instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::Workshop4Group8.Properties.Settings.Default.TravelExpertsConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Package> Packages
		{
			get
			{
				return this.GetTable<Package>();
			}
		}
		
		public System.Data.Linq.Table<Packages_Products_Supplier> Packages_Products_Suppliers
		{
			get
			{
				return this.GetTable<Packages_Products_Supplier>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Packages")]
	public partial class Package : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PackageId;
		
		private string _PkgName;
		
		private System.Nullable<System.DateTime> _PkgStartDate;
		
		private System.Nullable<System.DateTime> _PkgEndDate;
		
		private string _PkgDesc;
		
		private decimal _PkgBasePrice;
		
		private System.Nullable<decimal> _PkgAgencyCommission;
		
		private EntitySet<Packages_Products_Supplier> _Packages_Products_Suppliers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPackageIdChanging(int value);
    partial void OnPackageIdChanged();
    partial void OnPkgNameChanging(string value);
    partial void OnPkgNameChanged();
    partial void OnPkgStartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnPkgStartDateChanged();
    partial void OnPkgEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnPkgEndDateChanged();
    partial void OnPkgDescChanging(string value);
    partial void OnPkgDescChanged();
    partial void OnPkgBasePriceChanging(decimal value);
    partial void OnPkgBasePriceChanged();
    partial void OnPkgAgencyCommissionChanging(System.Nullable<decimal> value);
    partial void OnPkgAgencyCommissionChanged();
    #endregion
		
		public Package()
		{
			this._Packages_Products_Suppliers = new EntitySet<Packages_Products_Supplier>(new Action<Packages_Products_Supplier>(this.attach_Packages_Products_Suppliers), new Action<Packages_Products_Supplier>(this.detach_Packages_Products_Suppliers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PackageId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PackageId
		{
			get
			{
				return this._PackageId;
			}
			set
			{
				if ((this._PackageId != value))
				{
					this.OnPackageIdChanging(value);
					this.SendPropertyChanging();
					this._PackageId = value;
					this.SendPropertyChanged("PackageId");
					this.OnPackageIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PkgName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string PkgName
		{
			get
			{
				return this._PkgName;
			}
			set
			{
				if ((this._PkgName != value))
				{
					this.OnPkgNameChanging(value);
					this.SendPropertyChanging();
					this._PkgName = value;
					this.SendPropertyChanged("PkgName");
					this.OnPkgNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PkgStartDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> PkgStartDate
		{
			get
			{
				return this._PkgStartDate;
			}
			set
			{
				if ((this._PkgStartDate != value))
				{
					this.OnPkgStartDateChanging(value);
					this.SendPropertyChanging();
					this._PkgStartDate = value;
					this.SendPropertyChanged("PkgStartDate");
					this.OnPkgStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PkgEndDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> PkgEndDate
		{
			get
			{
				return this._PkgEndDate;
			}
			set
			{
				if ((this._PkgEndDate != value))
				{
					this.OnPkgEndDateChanging(value);
					this.SendPropertyChanging();
					this._PkgEndDate = value;
					this.SendPropertyChanged("PkgEndDate");
					this.OnPkgEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PkgDesc", DbType="NVarChar(50)")]
		public string PkgDesc
		{
			get
			{
				return this._PkgDesc;
			}
			set
			{
				if ((this._PkgDesc != value))
				{
					this.OnPkgDescChanging(value);
					this.SendPropertyChanging();
					this._PkgDesc = value;
					this.SendPropertyChanged("PkgDesc");
					this.OnPkgDescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PkgBasePrice", DbType="Money NOT NULL")]
		public decimal PkgBasePrice
		{
			get
			{
				return this._PkgBasePrice;
			}
			set
			{
				if ((this._PkgBasePrice != value))
				{
					this.OnPkgBasePriceChanging(value);
					this.SendPropertyChanging();
					this._PkgBasePrice = value;
					this.SendPropertyChanged("PkgBasePrice");
					this.OnPkgBasePriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PkgAgencyCommission", DbType="Money")]
		public System.Nullable<decimal> PkgAgencyCommission
		{
			get
			{
				return this._PkgAgencyCommission;
			}
			set
			{
				if ((this._PkgAgencyCommission != value))
				{
					this.OnPkgAgencyCommissionChanging(value);
					this.SendPropertyChanging();
					this._PkgAgencyCommission = value;
					this.SendPropertyChanged("PkgAgencyCommission");
					this.OnPkgAgencyCommissionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Package_Packages_Products_Supplier", Storage="_Packages_Products_Suppliers", ThisKey="PackageId", OtherKey="PackageId")]
		public EntitySet<Packages_Products_Supplier> Packages_Products_Suppliers
		{
			get
			{
				return this._Packages_Products_Suppliers;
			}
			set
			{
				this._Packages_Products_Suppliers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Packages_Products_Suppliers(Packages_Products_Supplier entity)
		{
			this.SendPropertyChanging();
			entity.Package = this;
		}
		
		private void detach_Packages_Products_Suppliers(Packages_Products_Supplier entity)
		{
			this.SendPropertyChanging();
			entity.Package = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Packages_Products_Suppliers")]
	public partial class Packages_Products_Supplier : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PackageId;
		
		private int _ProductId;
		
		private int _SupplierId;
		
		private EntityRef<Package> _Package;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPackageIdChanging(int value);
    partial void OnPackageIdChanged();
    partial void OnProductIdChanging(int value);
    partial void OnProductIdChanged();
    partial void OnSupplierIdChanging(int value);
    partial void OnSupplierIdChanged();
    #endregion
		
		public Packages_Products_Supplier()
		{
			this._Package = default(EntityRef<Package>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PackageId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PackageId
		{
			get
			{
				return this._PackageId;
			}
			set
			{
				if ((this._PackageId != value))
				{
					if (this._Package.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPackageIdChanging(value);
					this.SendPropertyChanging();
					this._PackageId = value;
					this.SendPropertyChanged("PackageId");
					this.OnPackageIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ProductId
		{
			get
			{
				return this._ProductId;
			}
			set
			{
				if ((this._ProductId != value))
				{
					this.OnProductIdChanging(value);
					this.SendPropertyChanging();
					this._ProductId = value;
					this.SendPropertyChanged("ProductId");
					this.OnProductIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SupplierId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int SupplierId
		{
			get
			{
				return this._SupplierId;
			}
			set
			{
				if ((this._SupplierId != value))
				{
					this.OnSupplierIdChanging(value);
					this.SendPropertyChanging();
					this._SupplierId = value;
					this.SendPropertyChanged("SupplierId");
					this.OnSupplierIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Package_Packages_Products_Supplier", Storage="_Package", ThisKey="PackageId", OtherKey="PackageId", IsForeignKey=true)]
		public Package Package
		{
			get
			{
				return this._Package.Entity;
			}
			set
			{
				Package previousValue = this._Package.Entity;
				if (((previousValue != value) 
							|| (this._Package.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Package.Entity = null;
						previousValue.Packages_Products_Suppliers.Remove(this);
					}
					this._Package.Entity = value;
					if ((value != null))
					{
						value.Packages_Products_Suppliers.Add(this);
						this._PackageId = value.PackageId;
					}
					else
					{
						this._PackageId = default(int);
					}
					this.SendPropertyChanged("Package");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
